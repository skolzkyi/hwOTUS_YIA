// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: api/EventService.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarClient interface {
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error)
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error)
	GetEventsOnDayByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error)
	GetEventsOnWeekByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error)
	GetEventsOnMonthByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error)
	GetListEventsNotificationByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error)
	DeleteOldEvents(ctx context.Context, in *DeleteOldEventsRequest, opts ...grpc.CallOption) (*DeleteOldEventsResponse, error)
	MarkEventNotifSended(ctx context.Context, in *MarkEventNotifSendedRequest, opts ...grpc.CallOption) (*MarkEventNotifSendedResponse, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*UpdateEventResponse, error) {
	out := new(UpdateEventResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*DeleteEventResponse, error) {
	out := new(DeleteEventResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEventsOnDayByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error) {
	out := new(GetEventsOnDayResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/GetEventsOnDayByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEventsOnWeekByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error) {
	out := new(GetEventsOnDayResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/GetEventsOnWeekByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEventsOnMonthByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error) {
	out := new(GetEventsOnDayResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/GetEventsOnMonthByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetListEventsNotificationByDay(ctx context.Context, in *GetEventsOnDayRequest, opts ...grpc.CallOption) (*GetEventsOnDayResponse, error) {
	out := new(GetEventsOnDayResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/GetListEventsNotificationByDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteOldEvents(ctx context.Context, in *DeleteOldEventsRequest, opts ...grpc.CallOption) (*DeleteOldEventsResponse, error) {
	out := new(DeleteOldEventsResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/DeleteOldEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) MarkEventNotifSended(ctx context.Context, in *MarkEventNotifSendedRequest, opts ...grpc.CallOption) (*MarkEventNotifSendedResponse, error) {
	out := new(MarkEventNotifSendedResponse)
	err := c.cc.Invoke(ctx, "/event.Calendar/MarkEventNotifSended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
// All implementations must embed UnimplementedCalendarServer
// for forward compatibility
type CalendarServer interface {
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error)
	DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error)
	GetEventsOnDayByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error)
	GetEventsOnWeekByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error)
	GetEventsOnMonthByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error)
	GetListEventsNotificationByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error)
	DeleteOldEvents(context.Context, *DeleteOldEventsRequest) (*DeleteOldEventsResponse, error)
	MarkEventNotifSended(context.Context, *MarkEventNotifSendedRequest) (*MarkEventNotifSendedResponse, error)
	mustEmbedUnimplementedCalendarServer()
}

// UnimplementedCalendarServer must be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (UnimplementedCalendarServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedCalendarServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedCalendarServer) UpdateEvent(context.Context, *UpdateEventRequest) (*UpdateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedCalendarServer) DeleteEvent(context.Context, *DeleteEventRequest) (*DeleteEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedCalendarServer) GetEventsOnDayByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsOnDayByDay not implemented")
}
func (UnimplementedCalendarServer) GetEventsOnWeekByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsOnWeekByDay not implemented")
}
func (UnimplementedCalendarServer) GetEventsOnMonthByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsOnMonthByDay not implemented")
}
func (UnimplementedCalendarServer) GetListEventsNotificationByDay(context.Context, *GetEventsOnDayRequest) (*GetEventsOnDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListEventsNotificationByDay not implemented")
}
func (UnimplementedCalendarServer) DeleteOldEvents(context.Context, *DeleteOldEventsRequest) (*DeleteOldEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOldEvents not implemented")
}
func (UnimplementedCalendarServer) MarkEventNotifSended(context.Context, *MarkEventNotifSendedRequest) (*MarkEventNotifSendedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkEventNotifSended not implemented")
}
func (UnimplementedCalendarServer) mustEmbedUnimplementedCalendarServer() {}

// UnsafeCalendarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServer will
// result in compilation errors.
type UnsafeCalendarServer interface {
	mustEmbedUnimplementedCalendarServer()
}

func RegisterCalendarServer(s grpc.ServiceRegistrar, srv CalendarServer) {
	s.RegisterService(&Calendar_ServiceDesc, srv)
}

func _Calendar_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEventsOnDayByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsOnDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEventsOnDayByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/GetEventsOnDayByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEventsOnDayByDay(ctx, req.(*GetEventsOnDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEventsOnWeekByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsOnDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEventsOnWeekByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/GetEventsOnWeekByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEventsOnWeekByDay(ctx, req.(*GetEventsOnDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEventsOnMonthByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsOnDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEventsOnMonthByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/GetEventsOnMonthByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEventsOnMonthByDay(ctx, req.(*GetEventsOnDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetListEventsNotificationByDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsOnDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetListEventsNotificationByDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/GetListEventsNotificationByDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetListEventsNotificationByDay(ctx, req.(*GetEventsOnDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteOldEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOldEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteOldEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/DeleteOldEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteOldEvents(ctx, req.(*DeleteOldEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_MarkEventNotifSended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkEventNotifSendedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).MarkEventNotifSended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.Calendar/MarkEventNotifSended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).MarkEventNotifSended(ctx, req.(*MarkEventNotifSendedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calendar_ServiceDesc is the grpc.ServiceDesc for Calendar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calendar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _Calendar_GetEvent_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Calendar_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Calendar_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
		{
			MethodName: "GetEventsOnDayByDay",
			Handler:    _Calendar_GetEventsOnDayByDay_Handler,
		},
		{
			MethodName: "GetEventsOnWeekByDay",
			Handler:    _Calendar_GetEventsOnWeekByDay_Handler,
		},
		{
			MethodName: "GetEventsOnMonthByDay",
			Handler:    _Calendar_GetEventsOnMonthByDay_Handler,
		},
		{
			MethodName: "GetListEventsNotificationByDay",
			Handler:    _Calendar_GetListEventsNotificationByDay_Handler,
		},
		{
			MethodName: "DeleteOldEvents",
			Handler:    _Calendar_DeleteOldEvents_Handler,
		},
		{
			MethodName: "MarkEventNotifSended",
			Handler:    _Calendar_MarkEventNotifSended_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/EventService.proto",
}
